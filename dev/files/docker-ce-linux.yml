# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: Docker Community Edition
description: Install the latest Docker Community Edition from Amazon Linux Extras, and enable the ec2-user user to manage docker without using sudo.
schemaVersion: 1.0
phases:
  - name: build
    steps:
      - name: InstallDockerCE
        action: ExecuteBash
        inputs:
          commands:
            - sudo amazon-linux-extras install docker
            - sudo systemctl start docker
            - sudo systemctl enable docker
            - sudo usermod -a -G docker ec2-user

      - name: RebootToEnablePermissions
        action: Reboot

      - name: WaitDockerServiceStartupPostReboot
        action: ExecuteBash
        inputs:
          commands:
            - |
              STATUS=fail

              # Total sleep time ~180 seconds for service startup.
              echo "Waiting for the Docker service to start"
              for i in {0..35}
              do
                  CUR_STATE=$(systemctl is-active docker)
                  if [[ $CUR_STATE == "active" ]]; then
                      echo "Docker service is active."
                      STATUS=success
                      break
                  else
                      echo "Docker service is not yet active. State '$CUR_STATE'. Sleeping 5 seconds..."
                      sleep 5
                  fi
              done

              if [[ $STATUS == "fail" ]]; then
                  echo "Docker service failed to start within timeout period. Failing."
                  exit 1
              fi

  - name: validate
    steps:
      # Do not loop here to allow a fast fail if validate phase is executed separately
      - name: ValidateDockerService
        action: ExecuteBash
        inputs:
          commands:
            - |
              CUR_STATE=$(systemctl is-active docker)
              if [[ $CUR_STATE == "active" ]]; then
                  echo "Docker service is active."
                  exit 0
              else
                  echo "Docker service is not active. State '$CUR_STATE'. Failing."
                  exit 1
              fi

      - name: ValidateDockerCommandExists
        action: ExecuteBash
        inputs:
          commands:
            - |
              if type -P docker &>/dev/null; then
                  echo "Docker command exists."
                  exit 0
              else
                  echo "Docker command does not exist. Failing."
                  exit 1
              fi

      - name: ValidateDockerGroupMembership
        action: ExecuteBash
        inputs:
          commands:
            - |
              if groups ec2-user | grep &>/dev/null 'docker'; then
                  echo "The 'ec2-user' is a member of the 'docker' group."
                  exit 0
              else
                  echo "The 'ec2-user' is not a member of the 'docker' group. Failing."
                  exit 1
              fi
